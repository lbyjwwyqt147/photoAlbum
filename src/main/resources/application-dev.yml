server:
  port: 18082
  tomcat:
      uri-encoding: utf-8
# 系统参数 信息
data:
  # 域名设置 跨域
  allowedOrigin: '*'
  # 直接访问 http://localhost:18081 时 返回信息设置
  indexView: '请访问：http://localhost:18082/swagger-ui.html  查看API文档'
  # cloud_core 地址
  cloudUrl: http://127.0.0.1:18080/api/
  # redis 是否默填充application name 作为redis key 的前缀   true 填充 false 不填充   例如：photo_album:user    photo_album:为自动填充
  redisPrefixion: true
  # 核心系统授权给 photo_album 访问的 code
  coreSystemCode: 1001
  # 核心系统授权给 photo_album 访问的 appId
  coreAppId: 1550817774159
  # 核心系统授权给 photo_album 访问的 appKey
  coreAppKey: 0020a9ebfc7b4667b0617488d96c788b
  # 核心系统授权给 photo_album 访问的 credential
  coreCredential: 42e853886ec8d3cbdaa062a732551b10
  # 核心系统的 appId  注意：是核心系统的appId 用于访问核心系统接口的数字签名
  cloudAppId: 1550817758252
  # 核心系统的 appKey 注意：核心系统的 appKey 用于访问核心系统接口的数字签名
  cloudAppKey: c80e645007264e2684b393533ef7e832
  security:
    # 不需要权限认证的资源
    antMatchers:
      /oauth/**,
      /api/v1/user/login,
      /api/user/login,
      /api/v1/out,
      /api/v1/user/out,
      /api/v1/verify/ignore/**,
      /api/v1/table/**

spring:
  datasource:
    druid:
      master:
        # 业务数据库
        type: com.alibaba.druid.pool.xa.DruidXADataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://101.132.136.225:3306/photo_manage?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=CTT&rewriteBatchedStatements=true&autoReconnect=true&failOverReadOnly=false
        # driver-class-name: net.sf.log4jdbc.DriverSpy
        # url: jdbc:log4jdbc:mysql://101.132.136.225:3306/photo_manage?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=CTT&rewriteBatchedStatements=true&autoReconnect=true&failOverReadOnly=false
        username: root
        password: root@123
      activiti:
        # Activiti 数据库
        type: com.alibaba.druid.pool.xa.DruidXADataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://101.132.136.225:3306/activiti_core?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=CTT&rewriteBatchedStatements=true&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&nullCatalogMeansCurrent=true
        # url换为jdbc-url 解决jdbcUrl is required with driverClassName错误
        jdbc-url: ${spring.datasource.druid.activiti.url}
        username: root
        password: root@123

      # 连接池配置
      #初始化时建立物理连接的个数
      initial-size: 5
      #最小空闲连接
      min-idle: 1
      #池中最大连接数
      max-active: 20
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
     # max-evictable-idle-time-millis: 600000
      max-open-prepared-statements: 60000
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      #获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false
      #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接 单位是毫秒
      time-between-eviction-runs-millis: 60000
      #使用该SQL语句检查链接是否可用。如果validationQuery=null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      validation-query: SELECT 1 FROM DUAL
      validation-query-timeout: 60000
      query-timeout: 60000
      transaction-threshold-millis: 60000
      remove-abandoned-timeout-millis: 30000
      remove-abandoned: true
      log-abandoned: false
      #  配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4,log4j2
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 监控配置　WebStatFilter配置
      web-stat-filter:
        enabled: true
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
        principal-cookie-name: admin
        principal-session-name: admin
        profile-enable: true
        session-stat-enable: false
        session-stat-max-count: 1000
        url-pattern: '/*'
      stat-view-servlet:
        # IP 白名单
        allow: 127.0.0.1
        #  IP黑名单(共同存在时，deny优先于allow)
        deny: 192.168.0.10
        enabled: true
        # 控制台用户名和密码
        login-password: admin
        login-username: admin
        reset-enable: false
        url-pattern: '/druid/*'
      # 配置日志输出
      filter:
        slf4j:
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
        log4j2:
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
        stat:
          #慢查询
          log-slow-sql: true
          #慢查询时长，默认3秒
          slow-sql-millis: 5000
          merge-sql: false
        wall:
          config:
            multi-statement-allow: true

  # jta atomikos 配置
  jta:
    atomikos:
      datasource:
        min-pool-size: 10
        max-pool-size: 20
        borrow-connection-timeout: 60
      connectionfactory:
        min-pool-size: 10
        max-pool-size: 20
        borrow-connection-timeout: 60
      properties:
        #配置最大的事务活动个数，-1代表无限制
        max-actives: -1
        # 默认的超时时间单位毫秒
        max-timeout: 600000
        default-jta-timeout: 600000
        enable-logging: true


  # elasticsearch 配置
  data:
    redis:
      repositories:
        enabled: false  # true 会出现 Spring Data Redis - Could not safely identify store assignment for repository candidate interface pers.liujunyi.cloud.photo.repository.jpa.album.AlbumRepository.
    elasticsearch:
      #节点的地址 注意api模式下端口号是9300，千万不要写成9200
      cluster-nodes: 101.132.136.225:9300
      # elasticsearch集群名称，默认的是elasticsearch
      cluster-name: docker-cluster
      properties:
        path:
          logs: ./elasticsearch/log # elasticsearch日志存储目录
          data: ./elasticsearch/data # elasticsearch数据存储目录
        transport:
          tcp:
            connect_timeout: 120s  # 连接超时的时间

  # 集成springboot-bboss-elasticsearch 配置
  elasticsearch:
    bboss:
      elasticUser:
      elasticPassword:
      elasticsearch:
        rest:
          hostNames: 101.132.136.225:9200
        dateFormat: yyyy-MM-dd hh:mm:ss
        timeZone: Asia/Shanghai
        ttl: 2d
        showTemplate: true
        discoverHost: false
      #dsl配置文件热加载扫描时间间隔，毫秒为单位，默认5秒扫描一次，<= 0时关闭扫描机制
      dslfile:
        refreshInterval: -1
      http:
         timeoutConnection: 400000
         timeoutSocket: 400000
         connectionRequestTimeout: 400000
         retryTime: 1
         maxLineLength: -1
         maxHeaderCount: 200
         maxTotal: 400
         defaultMaxPerRoute: 200
         soReuseAddress: false
         soKeepAlive: false
         timeToLive: 3600000
         keepAlive: 3600000
         keystore:
         keyPassword:
         hostnameVerifier:

  # redis 配置
  redis:
    host: 101.132.136.225
    port: 6379
    password:
    database: 10
    jedis:
      pool:
        #最大连接数
        max-active: 200
        #最大空闲连接数
        max-idle: 20
        # 当池内没有可用的连接时，最大等待时间(负数表示没限制)
        max-wait: 5000ms
        #最小空闲连接数
        min-idle: 10
    #连接超时时间
    timeout: 60000ms

  # RSA 加密
  encrypt:
    # RSA 私钥
    privateKey:
    # RSA 公钥
    publicKey:
    # AES 密钥
    secretKey: dO6+g3+08ELBKtx/1/WBYQ==
    # 签名过期时间 单位 分钟
    signExpireTime: 10
    # 开启调试模式，调试模式下不进行加解密操作，用于像Swagger这种在线API测试场景
    debug: false

  # 参考配置 https://www.cnblogs.com/liaojie970/p/8857710.html
  activiti:
    # 数据源指定
    database-schema: ACTIVITI
    # 建表规则： 服务启动时检查数据库表，不存在则创建
    database-schema-update: true
    # 表示哪种情况下使用历史表，这里配置为all表示全部记录历史，方便绘制流程图; 记录历史等级 可配置的历史级别有none, acitivity, audit, full
    history-level: full
    # 表示使用历史表，如果不配置，则工程启动后可以检查数据库
    db-history-used: true
    # spring jpa使用
    jpa-enabled: true
    # 如果你并没有将流程控制文件xx.bpmn, 配置文件里面暂时不检查它,后续可能会更新通过配置文件如何管理控制activiti
    check-process-definitions: false

# xxl-job  任务调度执行器配置
xxl:
  job:
    admin:
      #调度中心部署跟地址：如调度中心集群部署存在多个地址则用逗号分隔。
      #执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"。
      addresses: http://101.132.136.225:18084/xxl-job-admin

    #分别配置执行器的名称、ip地址、端口号
    #注意：如果配置多个执行器时，防止端口冲突
    executor:
      appname: xxl-job-executor-photo
      ip: 101.132.136.225
      port: 9999

      #执行器运行日志文件存储的磁盘位置，需要对该路径拥有读写权限
      logpath: /data/applogs/xxl-job/jobhandler
      #执行器Log文件定期清理功能，指定日志保存天数，日志文件过期自动删除。限制至少保持3天，否则功能不生效；
      #-1表示永不删除
      logretentiondays: -1

    accessToken: